<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.jboss.eap.quickstarts</groupId>
  <artifactId>kitchensink</artifactId>
  <version>8.0.0.GA</version>
  <packaging>war</packaging>
  <name>Quickstart: kitchensink</name>
  <description>A starter Jakarta EE web application project for use in JBoss EAP</description>

  <licenses>
    <license>
        <name>Apache License, Version 2.0</name>
        <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
        <distribution>repo</distribution>
    </license>
  </licenses>
  <properties>
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
      <maven.compiler.source>17</maven.compiler.source>
      <maven.compiler.target>17</maven.compiler.target>
      <version.server>8.0.0.GA-redhat-00009</version.server>
      <version.bom.ee>${version.server}</version.bom.ee>
      <version.plugin.wildfly>4.1.1.Final</version.plugin.wildfly>
      <version.plugin.war>3.3.2</version.plugin.war>
      <!-- EAP plugin version https://maven.repository.redhat.com/earlyaccess/all/org/jboss/eap/plugins/eap-maven-plugin/ -->
      <version.plugin.eap>1.0.0.Final-redhat-00014</version.plugin.eap> 
  </properties>

  <repositories>
        <repository>
            <id>jboss-public-maven-repository</id>
            <name>JBoss Public Maven Repository</name>
            <url>https://repository.jboss.org/nexus/content/groups/public/</url>
            <releases>
                <enabled>true</enabled>
                <updatePolicy>never</updatePolicy>
            </releases>
            <snapshots>
                <enabled>true</enabled>
                <updatePolicy>never</updatePolicy>
            </snapshots>
            <layout>default</layout>
        </repository>
        <repository>
            <id>redhat-ga-maven-repository</id>
            <name>Red Hat GA Maven Repository</name>
            <url>https://maven.repository.redhat.com/ga/</url>
            <releases>
                <enabled>true</enabled>
                <updatePolicy>never</updatePolicy>
            </releases>
            <snapshots>
                <enabled>true</enabled>
                <updatePolicy>never</updatePolicy>
            </snapshots>
            <layout>default</layout>
        </repository>
    </repositories>

  <pluginRepositories>
      <pluginRepository>
          <id>jboss-public-maven-repository</id>
          <name>JBoss Public Maven Repository</name>
          <url>https://repository.jboss.org/nexus/content/groups/public/</url>
          <releases>
              <enabled>true</enabled>
          </releases>
          <snapshots>
              <enabled>true</enabled>
          </snapshots>
      </pluginRepository>
      <pluginRepository>
          <id>redhat-ga-maven-repository</id>
          <name>Red Hat GA Maven Repository</name>
          <url>https://maven.repository.redhat.com/ga/</url>
          <releases>
              <enabled>true</enabled>
          </releases>
          <snapshots>
              <enabled>true</enabled>
          </snapshots>
      </pluginRepository>
  </pluginRepositories>

  <dependencyManagement>
      <dependencies>
          <dependency>
              <groupId>org.jboss.bom</groupId>                 
              <artifactId>jboss-eap-ee-with-tools</artifactId> 
              <version>${version.bom.ee}</version>
              <type>pom</type>
              <scope>import</scope>
          </dependency>
      </dependencies>
  </dependencyManagement>

  <dependencies>
     <!-- First declare the APIs we depend on and need for compilation. All
        of them are provided by JBoss EAP -->

        <!-- Import the CDI API, we use provided scope as the API is included in
        JBoss EAP -->
        <dependency>
            <groupId>jakarta.enterprise</groupId>
            <artifactId>jakarta.enterprise.cdi-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Needed for running tests (you may also use TestNG) -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Now we declare any tools needed -->

        <!-- Annotation processor to generate the JPA metamodel classes for
        typesafe criteria queries -->
        <dependency>
            <groupId>org.hibernate.orm</groupId>
            <artifactId>hibernate-jpamodelgen</artifactId>
            <scope>provided</scope>
        </dependency>
        <!-- Jakarta Activation needed for JPA model generation -->
        <dependency>
            <groupId>jakarta.activation</groupId>
            <artifactId>jakarta.activation-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Bean Validation Implementation 
             Provides portable constraints such as @Email 
             Hibernate Validator is shipped in JBoss EAP -->
        <dependency>
            <groupId>org.hibernate.validator</groupId>
            <artifactId>hibernate-validator</artifactId>
            <scope>provided</scope>
        </dependency>
        <!-- hibernate-validator dependencies excluded on server dependency management yet required -->
        <dependency>
            <groupId>jakarta.validation</groupId>
            <artifactId>jakarta.validation-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Annotation processor that raising compilation errors whenever constraint
            annotations are incorrectly used. -->
        <dependency>
            <groupId>org.hibernate.validator</groupId>
            <artifactId>hibernate-validator-annotation-processor</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Import the JPA API, we use provided scope as the API is included in
            JBoss EAP -->
        <dependency>
            <groupId>jakarta.persistence</groupId>
            <artifactId>jakarta.persistence-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Optional, but highly recommended -->
        <!-- Arquillian allows you to test enterprise code such as EJBs and Transactional(JTA)
            JPA from JUnit/TestNG -->
        <dependency>
            <groupId>org.jboss.arquillian.junit</groupId>
            <artifactId>arquillian-junit-container</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.jboss.arquillian.protocol</groupId>
            <artifactId>arquillian-protocol-servlet-jakarta</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Import the Common Annotations API (JSR-250), we use provided scope
        as the API is included in JBoss EAP -->
        <dependency>
            <groupId>jakarta.annotation</groupId>
            <artifactId>jakarta.annotation-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Import the EJB API, we use provided scope as the API is included in
        JBoss EAP -->
        <dependency>
            <groupId>jakarta.ejb</groupId>
            <artifactId>jakarta.ejb-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Import the JSF API, we use provided scope as the API is included in
        JBoss EAP -->
        <dependency>
            <groupId>jakarta.faces</groupId>
            <artifactId>jakarta.faces-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Import the JAX-RS API, we use provided scope as the API is included
        in JBoss EAP -->
        <dependency>
            <groupId>jakarta.ws.rs</groupId>
            <artifactId>jakarta.ws.rs-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>jakarta.xml.bind</groupId>
            <artifactId>jakarta.xml.bind-api</artifactId>
            <scope>provided</scope>
        </dependency>
        
        <dependency>
            <groupId>jakarta.json</groupId>
            <artifactId>jakarta.json-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.parsson</groupId>
            <artifactId>parsson</artifactId>
            <scope>test</scope>
        </dependency>
  </dependencies>

  <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.wildfly.plugins</groupId>
                    <artifactId>wildfly-maven-plugin</artifactId>
                    <version>${version.plugin.wildfly}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-war-plugin</artifactId>
                    <version>${version.plugin.war}</version>
                </plugin>
                <!-- JBoss EAP plugin -->
                <plugin>
                    <groupId>org.jboss.eap.plugins</groupId>
                    <artifactId>eap-maven-plugin</artifactId>
                    <version>${version.plugin.eap}</version>
                </plugin>
            </plugins>
        </pluginManagement>
        <finalName>ROOT</finalName>
    </build>

    <profiles>
      <profile>
          <id>openshift</id>
          <build>
              <plugins>
                  <plugin>
                      <groupId>org.jboss.eap.plugins</groupId>
                      <!-- 
                        wildfly-maven-plugin is a JBoss EAP plug-in for provisioning a JBoss EAP instance, 
                        with the application deployed, on OpenShift Container Platform.  
                      -->
                      <artifactId>eap-maven-plugin</artifactId>     
                      <configuration>
                          <channels>
                              <!--  
                                This specifies the JBoss EAP 8.0 channel in which the JBoss EAP server artifacts are defined. 
                                https://maven.repository.redhat.com/earlyaccess/all/org/jboss/eap/channels/eap-8.0/
                              -->
                              <channel>
                                  <manifest>
                                      <groupId>org.jboss.eap.channels</groupId>
                                      <artifactId>eap-8.0</artifactId>
                                      <!-- <version>1.2.1.GA-redhat-00003</version> -->
                                      <!-- <version>1.3.1.GA-redhat-00001</version> -->
                                      <version>1.5.1.GA-redhat-00002</version>
                                  </manifest>
                              </channel>
                          </channels>
                          <!-- 
                            feature-packs defines the feature-packs (zipped files that contains features to dynamically provision a server). 
                            In this case we need the feature-packs org.wildfly:wildfly-galleon-pack and org.wildfly.cloud:wildfly-cloud-galleon-pack -->
                          <feature-packs>
                              <feature-pack>                            
                                  <location>org.jboss.eap:wildfly-ee-galleon-pack</location>
                              </feature-pack>
                              <feature-pack>
                                  <location>org.jboss.eap.cloud:eap-cloud-galleon-pack</location>
                              </feature-pack>
                              <feature-pack>
                                  <location>org.jboss.eap:eap-datasources-galleon-pack</location>
                              </feature-pack>
                          </feature-packs>
                          <!-- 
                            layers defines the layers (from the configured feature-packs) to include in the provisioned server. 
                            Each layer identifies one or more server capabilities that can be installed on its own, or in combination with other layers. 
                            In our case we opt for the cloud-server layer, which provisions just the basic features of JBoss EAP, 
                            well suited for a cloud server. -->
                          <layers>
                            <layer>cloud-server</layer>
                            <layer>postgresql-datasource</layer>
                            <layer>ejb</layer>
                            <layer>jsf</layer>
                            <layer>web-clustering</layer>
                          </layers>
                          <!-- 
                            packaging-scripts defines the scripts to be executed during the packaging phase. 
                            In this case we are adding a system property to the server configuration.
                            -->
                          <packaging-scripts>
                            <packaging-script>
                                <scripts>
                                    <script>./scripts/setup.cli</script>
                                </scripts>
                                <commands>
                                    <command>/system-property=main.host.hal:add(value=hal-9000)</command>
                                </commands>
                                <!-- <properties-files>
                                  <property-file>my-properties.properties</property-file>
                                </properties-files>
                                <java-opts>
                                  <java-opt>-Xmx256m</java-opt>
                                </java-opts> -->
                                <!-- Expressions resolved during server execution -->
                                <resolve-expressions>false</resolve-expressions>
                            </packaging-script>
                          </packaging-scripts>
                          <!-- Name -->
                          <name>ROOT.war</name>                         
                      </configuration>
                      <executions>
                          <execution>
                              <goals>
                                  <goal>package</goal>
                              </goals>
                          </execution>
                      </executions>
                  </plugin>
              </plugins>
          </build>
      </profile>
      <profile>
            <!-- An optional Arquillian testing profile that executes tests in a remote JBoss EAP instance.
            Run with: mvn clean verify -Parq-remote -->
            <id>arq-remote</id>
            <dependencies>
                <dependency>
                    <groupId>org.wildfly.arquillian</groupId>
                    <artifactId>wildfly-arquillian-container-remote</artifactId>
                    <scope>test</scope>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <version>${version.failsafe.plugin}</version>
                        <configuration>
                            <includes>
                                <include>**/RemoteMemberRegistrationIT</include>
                            </includes>
                            <excludes>
                                <exclude>**/MemberRegistrationIT</exclude>
                            </excludes>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>integration-test</goal>
                                    <goal>verify</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
  </profiles>
</project>
