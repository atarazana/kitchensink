
embed-server --std-out=echo --server-config=standalone-openshift.xml

if (outcome == success) of /subsystem=datasources/data-source=kitchensink:add( \
    jndi-name="java:jboss/jdbc/kitchensink", \
    connection-url="jdbc:postgresql://${env.DB_HOST}:${env.DB_PORT:5432}/${env.DB_NAME:kitchensink}", \
    driver-name=postgresql,user-name=${env.DB_USERNAME},password=${env.DB_PASSWORD}, \
    validate-on-match=true, \
    valid-connection-checker-class-name="org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker", \
    exception-sorter-class-name="org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter")
    echo Kitchensink datasource created
end-if

if (outcome == success) of /subsystem=datasources/jdbc-driver=mysql:read-attribute(name=driver-name)
    # Remove Driver
    /subsystem=datasources/jdbc-driver=mysql:remove
end-if

echo About to install Keycloak

if (outcome != success) of /extension=org.keycloak.keycloak-saml-adapter-subsystem:read-resource
    /extension=org.keycloak.keycloak-saml-adapter-subsystem/:add(module=org.keycloak.keycloak-saml-adapter-subsystem)
else
    echo Keycloak SAML Extension already installed
end-if

if (outcome != success) of /subsystem=keycloak-saml:read-resource
    /subsystem=keycloak-saml:add
else
    echo Keycloak SAML Subsystem already installed
end-if

if (outcome != success) of /subsystem=elytron/custom-realm=KeycloakSAMLRealm:read-resource
    /subsystem=elytron/custom-realm=KeycloakSAMLRealm:add(class-name=org.keycloak.adapters.saml.elytron.KeycloakSecurityRealm, module=org.keycloak.keycloak-saml-wildfly-elytron-adapter)
else
    echo Keycloak SAML Realm already installed
end-if

if (outcome != success) of /subsystem=elytron/security-domain=KeycloakDomain:read-resource
    /subsystem=elytron/security-domain=KeycloakDomain:add(default-realm=KeycloakSAMLRealm,permission-mapper=default-permission-mapper,security-event-listener=local-audit,realms=[{realm=KeycloakSAMLRealm}])
else
    echo Keycloak Security Domain already installed. Trying to install Keycloak SAML Realm.
    /subsystem=elytron/security-domain=KeycloakDomain:list-add(name=realms, value={realm=KeycloakSAMLRealm})
end-if

if (outcome != success) of /subsystem=elytron/constant-realm-mapper=keycloak-saml-realm-mapper:read-resource
    /subsystem=elytron/constant-realm-mapper=keycloak-saml-realm-mapper:add(realm-name=KeycloakSAMLRealm)
else
    echo Keycloak SAML Realm Mapper already installed
end-if

if (outcome != success) of /subsystem=elytron/service-loader-http-server-mechanism-factory=keycloak-saml-http-server-mechanism-factory:read-resource
    /subsystem=elytron/service-loader-http-server-mechanism-factory=keycloak-saml-http-server-mechanism-factory:add(module=org.keycloak.keycloak-saml-wildfly-elytron-adapter)
else
    echo Keycloak SAML HTTP Mechanism Factory already installed
end-if

if (outcome != success) of /subsystem=elytron/aggregate-http-server-mechanism-factory=keycloak-http-server-mechanism-factory:read-resource
    /subsystem=elytron/aggregate-http-server-mechanism-factory=keycloak-http-server-mechanism-factory:add(http-server-mechanism-factories=[keycloak-saml-http-server-mechanism-factory, global])
else
    echo Keycloak HTTP Mechanism Factory already installed. Trying to install Keycloak SAML HTTP Mechanism Factory.
    /subsystem=elytron/aggregate-http-server-mechanism-factory=keycloak-http-server-mechanism-factory:list-add(name=http-server-mechanism-factories, value=keycloak-saml-http-server-mechanism-factory)
end-if

if (outcome != success) of /subsystem=elytron/http-authentication-factory=keycloak-http-authentication:read-resource
    /subsystem=elytron/http-authentication-factory=keycloak-http-authentication:add(security-domain=KeycloakDomain,http-server-mechanism-factory=keycloak-http-server-mechanism-factory,mechanism-configurations=[{mechanism-name=KEYCLOAK-SAML,mechanism-realm-configurations=[{realm-name=KeycloakSAMLCRealm,realm-mapper=keycloak-saml-realm-mapper}]}])
else
    echo Keycloak HTTP Authentication Factory already installed. Trying to install Keycloak SAML Mechanism Configuration
    /subsystem=elytron/http-authentication-factory=keycloak-http-authentication:list-add(name=mechanism-configurations, value={mechanism-name=KEYCLOAK-SAML,mechanism-realm-configurations=[{realm-name=KeycloakSAMLRealm,realm-mapper=keycloak-saml-realm-mapper}]})
end-if

if (outcome != success) of /subsystem=undertow/application-security-domain=other:read-resource
    /subsystem=undertow/application-security-domain=other:add(http-authentication-factory=keycloak-http-authentication)
else
    echo Undertow already configured with Keycloak
end-if

# https://www.keycloak.org/docs/latest/securing_apps/#_saml_jboss_adapter
# https://access.redhat.com/documentation/es-es/red_hat_single_sign-on/7.5/html/red_hat_single_sign-on_for_openshift/tutorials#Example-EAP-Manual
# Add the WAR that is protected with SAML
if (outcome == success) of /subsystem=keycloak-saml/secure-deployment=ROOT.war:add()
    # Add SAML Service Provider
    /subsystem=keycloak-saml/secure-deployment=ROOT.war/SP="${env.SP_URL:https://serviciosappdes.metromadrid.es/gesreve/}":add( \
        logoutPage="/logout.jsp",sslPolicy="EXTERNAL",nameIDPolicyFormat="urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified", \
        forceAuthentication="false",isPassive="false",turnOffChangeSessionIdOnLogin="false", \
        RoleIdentifiers=["role","member","memberOf","http://schemas.microsoft.com/ws/2008/06/identity/claims/role","http://schemas.microsoft.com/ws/2008/06/identity/claims/memberof"], \
        PrincipalNameMapping-attribute-name="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress", PrincipalNameMapping-policy="FROM_ATTRIBUTE")

    # Add SAML Identity Provider
    /subsystem=keycloak-saml/secure-deployment=ROOT.war/SP="${env.SP_URL:https://serviciosappdes.metromadrid.es/gesreve/}"/IDP="${env.IDP_URL:http://sts.metromadrid.net/adfs/services/trust}":add( \
        signaturesRequired="false",signatureAlgorithm="RSA_SHA256",signatureCanonicalizationMethod="http://www.w3.org/2001/10/xml-exc-c14n#",\
        SingleSignOnService={requestBinding="POST",bindingUrl="${env.IDP_SSO_BINDING_URL:https://sts.metromadrid.net/adfs/ls/}"},\
        SingleLogoutService={
            validateRequestSignature="false", \
            validateResponseSignature="false",signRequest="true",signResponse="false",requestBinding="POST",responseBinding="POST", \
            postBindingUrl="${env.IDP_SLS_POST_BINDING_URL:https://sts.metromadrid.net/adfs/ls/}",\
            redirectBindingUrl="${env.IDP_SLS_REDIRECT_BINDING_URL:https://serviciosappdes.metromadrid.es/gesreve/saml}" \
        })
else
    echo Error protecting ROOT.war
end-if

quit


              
                